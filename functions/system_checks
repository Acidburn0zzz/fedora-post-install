#!/bin/bash

# Check if package is installed
function check_packages() {
	dnf list installed | grep $@ &> /dev/null
}

# Check if flatpak package is installed
function check_flatpak() {
	flatpak list | grep $@ &> /dev/null
}

# Check if flatpak repo is added
function check_flatpak_repo() {
	flatpak remotes | grep $@ &> /dev/null
}

# Check which distribution the user is running
function check_os {
	echo_message header "Starting 'check_os' function"
	echo_message title "Checking which OS you are using..."
	# Variables
	OS_NAME="Linux"
	# Check if Linux
	echo_message info "Current OS is: "$(uname)
	if [[ $(uname) != "$OS_NAME" ]]; then
		echo_message error "You don't appear to be using $OS_NAME! Aborting. :("
		exit 99
	else
		echo_message success "You are using '$OS_NAME'. :D"
	fi
}

# Check which distribution the user is running
function check_distribution {
	echo_message header "Starting 'check_distribution' function"
	echo_message title "Checking which Linux distribution you are using..."
	DIST_NAME="Fedora"
	# Check if lsb_release works
	if [[ $(which lsb_release &>/dev/null; echo $?) != 0 ]]; then
		echo_message error "Error checking which distribution you are using! Aborting."
		sleep 3 && exit 99
	else
		# Display current distribution
		echo_message info "Current distribution is: $(lsb_release -ds)"
		# Check distribution
		if lsb_release -ds | grep -q $DIST_NAME; then
			echo_message success "You are using '$DIST_NAME'. :D"
		else
			echo_message warning "You are using a distribution may not be compatible with this script set."
			echo_message warning "Proceeding may break your system."
			echo_message question "Are you sure you want to continue? (Y)es, (N)o : " && read REPLY
			case $REPLY in
			# Positive action
			[Yy]* )
				echo_message warning "You have been warned."
				;;
			# Negative action
			[Nn]* )
				echo_message info "Exiting..."
				exit 99
				;;
			# Error
			* )
				echo_message error 'Sorry, try again.' && check_distribution
				;;
			esac
		fi
	fi
}

# Check for and install required packages for this script set.
function check_dependencies {
	echo_message header "Starting 'check_dependencies' function"
	echo_message title "Checking if necessary dependencies are installed..."
	# Variables
	LIST=$(dirname "$0")'/data/dependencies.list'
	# Check dependencies
	for PACKAGE in $(cat $LIST); do 
		# Check if package is installed
		if [ $(check_packages $PACKAGE; echo $?) = 1 ]; then
			echo_message info "This script requires '$PACKAGE' and it is not present on your system."
			echo_message question 'Would you like to install it to continue? (Y)es, (N)o : ' && read REPLY
			case $REPLY in
			# Positive action
			[Yy]* ) 
				echo_message warning "Requires root privileges"
				sudo dnf -y install $PACKAGE
				echo_message success "Package '$PACKAGE' installed."
				;;
			# Negative action
			[Nn]* )
				echo_message info "Exiting..."
				exit 99
				;;
			# Error
			* )
				echo_message error 'Sorry, try again.' && check
				;;
			esac
		else
			echo_message info "Dependency '$PACKAGE' is installed."
		fi
	done
	echo_message success "All dependencies are installed. :)"
}

# Check if current user is in the sudo group
function check_privileges {
	echo_message header "Starting 'check_privileges' function"
	echo_message title "Checking administrative privileges of current user..."
	# Check if user is root
	if [[ $EUID != 0 ]]; then
		if [[ $(groups $USER | grep -q 'wheel'; echo $?) != 0 ]]; then
			echo_message error "This user account doesn't have admin privileges."
			echo_message info "Log in as a user with admin privileges to be able to much of these scripts.."
			echo_message info "Exiting..."
			sleep 5 && exit 99
		else
			# Current user can use 'sudo'
			echo_message success "Current user has sudo privileges. :)"
		fi
	else
		if (whiptail --title "Root User" --yesno "You are logged in as the root user. This is not recommended.\n\nAre you sure you want to proceed?" 8 56) then
			echo_message warning "You are logged in as the root user. This is not recommended. :/"
		else
			echo_message info "Exiting..."
			exit 99
		fi
	fi
}

function system_checks {
	# Check OS
	check_os
	# Check OS
	check_distribution
	# Check sudo
	check_privileges
	# Check dependencies
	check_dependencies
}